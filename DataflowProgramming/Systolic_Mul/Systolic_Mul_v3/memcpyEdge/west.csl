// Color along which we send A wavelet to kernel
param MEMCPYH2D_1 = {};
param USER_IN_1 = {};

const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);
param memcpy_params: comptime_struct;

const txdir: direction = EAST;

// entrypoint
const WEST_STARTUP: local_task_id = @get_local_task_id(9);

// Queue IDs
const h2d_1_iq: input_queue = @get_input_queue(5);
const USER_IN_1_oq: output_queue = @get_output_queue(4);

const max_fifo_len = 256*20; // maximum length of the fifo

var fifo_buffer = @zeros([max_fifo_len]u32);
const fifo = @allocate_fifo(fifo_buffer);

const INFINITE_DSD_LEN: u16 = 0x7fff;

var fab_recv_wdsd = @get_dsd(fabin_dsd, .{
  .extent = INFINITE_DSD_LEN,
  .fabric_color = MEMCPYH2D_1,
  .input_queue = h2d_1_iq,
});

var fab_trans_wdsd = @get_dsd(fabout_dsd, .{
  .extent = INFINITE_DSD_LEN,
  .fabric_color = USER_IN_1,
  .output_queue = USER_IN_1_oq,
});

// if no user's color is defined, f_startup() is empty
task f_startup() void {
  if (!@is_same_type(@type_of(MEMCPYH2D_1), void) and !@is_same_type(@type_of(USER_IN_1), void)) {
    // receive data from streaming H2D
    @mov32(fifo, fab_recv_wdsd, .{ .async = true });

    // forward data to USER_IN_1
    @mov32(fab_trans_wdsd, fifo, .{ .async = true });
  }
}

fn rpc_sync() void {
    sys_mod.unblock_cmd_stream();
}

fn init() void {
    sys_mod.unblock_cmd_stream();
}

comptime {
    @export_symbol(rpc_sync);
    @export_symbol(init);
}


comptime {
  if (!@is_same_type(@type_of(USER_IN_1), void)) {
    @set_local_color_config(USER_IN_1, .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ txdir }}});
  }

  // On WSE-3, we must explicitly initialize input and output queues
  if (@is_arch("wse3")) {
    if (!@is_same_type(@type_of(USER_IN_1), void)) {
      @initialize_queue(h2d_1_iq, .{ .color = MEMCPYH2D_1 });
      @initialize_queue(USER_IN_1_oq, .{ .color = USER_IN_1 });
    }
  }

    @bind_local_task(f_startup, WEST_STARTUP);
    @activate(WEST_STARTUP);
}