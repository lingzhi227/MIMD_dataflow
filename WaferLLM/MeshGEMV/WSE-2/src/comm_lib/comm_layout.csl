param P: i16;

param y_colors: [4]color;
param y_reduce_colors: [4]color;

const C_down_0: color = y_colors[0];
const C_down_1: color = y_colors[1];
const C_up_0: color = y_colors[2];
const C_up_1: color = y_colors[3];

const C_y_up_reduce_0: color = y_reduce_colors[0];
const C_y_up_reduce_1: color = y_reduce_colors[1];
const C_y_down_reduce_0: color = y_reduce_colors[2];
const C_y_down_reduce_1: color = y_reduce_colors[3];

fn get_step_params(is_py_even: bool) comptime_struct {

    var c_down_recv: color = C_down_0;
    var c_down_send: color = C_down_1;

    var c_up_recv: color = C_up_0;
    var c_up_send: color = C_up_1;

    if (is_py_even){
        c_down_recv = C_down_0;
        c_down_send = C_down_1;

        c_up_recv = C_up_0;
        c_up_send = C_up_1;
    } else {
        c_down_recv = C_down_1;
        c_down_send = C_down_0;

        c_up_recv = C_up_1;
        c_up_send = C_up_0;
    }

    return .{
        .c_down_recv = c_down_recv,
        .c_down_send = c_down_send,
        .c_up_recv = c_up_recv,
        .c_up_send = c_up_send,
    };
}

fn get_reduce_2nd_params(py: i16, quotient_y: i16) comptime_struct {

    var c_y_up_reduce_send: color = C_y_up_reduce_1;
    var c_y_up_reduce_recv: color = C_y_up_reduce_0;

    var c_y_down_reduce_send: color = C_y_down_reduce_1;
    var c_y_down_reduce_recv: color = C_y_down_reduce_0;

    if (quotient_y % 2 == 0){
        c_y_up_reduce_send = C_y_up_reduce_0;
        c_y_up_reduce_recv = C_y_up_reduce_1;

        c_y_down_reduce_send = C_y_down_reduce_0;
        c_y_down_reduce_recv = C_y_down_reduce_1;
    }

    return .{
        .c_y_up_reduce_send = c_y_up_reduce_send,
        .c_y_up_reduce_recv = c_y_up_reduce_recv,

        .c_y_down_reduce_send = c_y_down_reduce_send,
        .c_y_down_reduce_recv = c_y_down_reduce_recv,
    };
}