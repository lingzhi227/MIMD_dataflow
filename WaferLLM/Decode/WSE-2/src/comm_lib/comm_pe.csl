param P: i16;
param bsz: i16;
param dim_p_pe: i16;
param seq_len_p_pe: i16;
param ffn_dim_p_pe: i16;

param pe_num_p_group: i16;
param root_1st_phase: i16;
param root_2nd_phase: i16;

const math = @import_module("<math>");

var px: i16 = 0;
var py: i16 = 0;

var is_first_px: bool = false;
var is_last_px: bool = false;

var is_first_py: bool = false;
var is_last_py: bool = false;

var is_group_first_px: bool = false;
var is_group_last_px: bool = false;
var is_group_root_px: bool = false;

var is_top_half_px: bool = false;
var is_bottom_half_px: bool = false;

var is_first_group_px: bool = false;
var is_last_group_px: bool = false;

var is_group_first_py: bool = false;
var is_group_last_py: bool = false;
var is_group_root_py: bool = false;

var is_top_half_py: bool = false;
var is_bottom_half_py: bool = false;

var is_first_group_py: bool = false;
var is_last_group_py: bool = false;


param c_right_recv: color;
param c_right_send: color;
param c_left_recv: color;
param c_left_send: color;


param c_down_recv: color;
param c_down_send: color;
param c_up_recv: color;
param c_up_send: color;

param up_bd_color: color;
param down_bd_color: color;

param left_bd_color: color;
param right_bd_color: color;

param c_y_up_reduce_send: color;
param c_y_up_reduce_recv: color;

param c_y_down_reduce_send: color;
param c_y_down_reduce_recv: color;

param c_x_left_reduce_send: color;
param c_x_left_reduce_recv: color;

param c_x_right_reduce_send: color;
param c_x_right_reduce_recv: color;

const vector_buf_dsr = @get_dsr(dsr_src1, 6);

const dummy = @zeros([1]f16);

var vector_buf_dsd_bsz_ffnDim = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{bsz*ffn_dim_p_pe} -> dummy[i] });
var vector_buf_dsd_bsz_ffnDim_ZZ_fusion = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{2*bsz*ffn_dim_p_pe} -> dummy[i] });
var vector_buf_dsd_bsz_dim = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{bsz*dim_p_pe} -> dummy[i] });
var vector_buf_dsd_bsz_dim_QKV_fusion = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{3*bsz*dim_p_pe} -> dummy[i] });
var vector_buf_dsd_bsz_seqLen = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{bsz*seq_len_p_pe} -> dummy[i] });
var vector_buf_dsd_bsz = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{bsz} -> dummy[i] });

fn init_(_px: i16, _py: i16) void {
    px = _px;
    py = _py;

    if (px == 0) {
        is_first_px = true;
    } else if (px == P-1) {
        is_last_px = true;
    }

    if (py == 0) {
        is_first_py = true;
    } else if (py == P-1) {
        is_last_py = true;
    }
    
    // x-axis
    var remainder_x: i16 = px - @as(i16, math.floor_f16(@as(f16, px) / @as(f16, pe_num_p_group))) * pe_num_p_group;

    if (remainder_x == 0) {
        is_group_first_px = true;
    }
    
    if (remainder_x == pe_num_p_group - 1) {
        is_group_last_px = true;
    } 
    
    if (remainder_x == root_1st_phase) {
        is_group_root_px = true;
    } else if (remainder_x < root_1st_phase) {
        is_top_half_px = true;
    } else {
        is_bottom_half_px = true;
    }

    if (px < pe_num_p_group) {
        is_first_group_px = true;
    } 
    
    if (px > P - pe_num_p_group - 1) {
        is_last_group_px = true;
    }

    // y-axis
    var remainder_y: i16 = py - @as(i16, math.floor_f16(@as(f16, py) / @as(f16, pe_num_p_group))) * pe_num_p_group;

    if (remainder_y == 0) {
        is_group_first_py = true;
    }
    
    if (remainder_y == pe_num_p_group - 1) {
        is_group_last_py = true;
    } 
    
    if (remainder_y == root_1st_phase) {
        is_group_root_py = true;
    } else if (remainder_y < root_1st_phase) {
        is_top_half_py = true;
    } else {
        is_bottom_half_py = true;
    }

    if (py < pe_num_p_group) {
        is_first_group_py = true;
    } 
    
    if (py > P - pe_num_p_group - 1) {
        is_last_group_py = true;
    }

}

const mv_down_send_bsz_ffnDim = @get_dsd(fabout_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = c_down_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_down_recv_bsz_ffnDim = @get_dsd(fabin_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = c_down_recv,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_send_bsz_ffnDim = @get_dsd(fabout_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = c_up_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_recv_bsz_ffnDim = @get_dsd(fabin_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = c_up_recv,
    .simd_mode = .{ .simd_32 = true },
});

// For directly broadcast in y-axis
const up_bd_send_bsz_ffnDim = @get_dsd(fabout_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const up_bd_recv_bsz_ffnDim = @get_dsd(fabin_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_send_bsz_ffnDim = @get_dsd(fabout_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_recv_bsz_ffnDim = @get_dsd(fabin_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

// 2-phase reduce-add-scatter in y-axis
const up_reduce_send_bsz_ffnDim = @get_dsd(fabout_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = c_y_up_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const up_reduce_recv_bsz_ffnDim = @get_dsd(fabin_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = c_y_up_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_send_bsz_ffnDim = @get_dsd(fabout_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = c_y_down_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_recv_bsz_ffnDim = @get_dsd(fabin_dsd, .{
    .extent = bsz*ffn_dim_p_pe,
    .fabric_color = c_y_down_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

fn two_tree_allreduce_add_y_bsz_ffnDim(vector_buf_ptr: [*]f16) void {

    vector_buf_dsd_bsz_ffnDim = @set_dsd_base_addr(vector_buf_dsd_bsz_ffnDim, vector_buf_ptr);
    @load_to_dsr(vector_buf_dsr, vector_buf_dsd_bsz_ffnDim);

    // The first phase
    if (is_group_root_py) {
        if (!is_group_last_py) {
            @faddh(vector_buf_dsd_bsz_ffnDim, mv_up_recv_bsz_ffnDim, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_ffnDim, mv_down_recv_bsz_ffnDim, vector_buf_dsr);
    } else if (is_group_first_py) {
        @fmovh(mv_down_send_bsz_ffnDim, vector_buf_dsr);
    } else if (is_group_last_py) {
        @fmovh(mv_up_send_bsz_ffnDim, vector_buf_dsr);
    } else {
        if (is_top_half_py) {
            @faddh(mv_down_send_bsz_ffnDim, mv_down_recv_bsz_ffnDim, vector_buf_dsr);
        } else {
            @faddh(mv_up_send_bsz_ffnDim, mv_up_recv_bsz_ffnDim, vector_buf_dsr);
        }
    }

    // The second phase
    if (py == root_2nd_phase) {
        if (!is_last_group_py) {
            @faddh(vector_buf_dsd_bsz_ffnDim, up_reduce_recv_bsz_ffnDim, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_ffnDim, down_reduce_recv_bsz_ffnDim, vector_buf_dsr);
    } else if (is_group_root_py) {
        if (is_first_group_py) {
            @fmovh(down_reduce_send_bsz_ffnDim, vector_buf_dsr);
        } else if (is_last_group_py) {
            @fmovh(up_reduce_send_bsz_ffnDim, vector_buf_dsr);
        } else {
            if (py < root_2nd_phase) {
                @faddh(down_reduce_send_bsz_ffnDim, down_reduce_recv_bsz_ffnDim, vector_buf_dsr);
            } else {
                @faddh(up_reduce_send_bsz_ffnDim, up_reduce_recv_bsz_ffnDim, vector_buf_dsr);
            }
        }
    }

    // Scatter
    if (py == root_2nd_phase) {
        @fmovh(up_bd_send_bsz_ffnDim, vector_buf_dsr);
        if (!is_last_py) {
            @fmovh(down_bd_send_bsz_ffnDim, vector_buf_dsr);
        }
    } else {
        if (py < root_2nd_phase) {
            @fmovh(vector_buf_dsd_bsz_ffnDim, up_bd_recv_bsz_ffnDim);
        } else {
            @fmovh(vector_buf_dsd_bsz_ffnDim, down_bd_recv_bsz_ffnDim);
        }
    }

}


const mv_right_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_right_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_right_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_right_recv,
    .simd_mode = .{ .simd_32 = true },
});

const mv_left_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_left_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_left_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_left_recv,
    .simd_mode = .{ .simd_32 = true },
});

const mv_down_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_down_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_down_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_down_recv,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_up_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_up_recv,
    .simd_mode = .{ .simd_32 = true },
});

// For directly broadcast in y-axis
const up_bd_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const up_bd_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

// For directly broadcast in x-axis
const left_bd_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = left_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const left_bd_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = left_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const right_bd_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = right_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const right_bd_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = right_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

// 2-phase reduce-add-scatter in y-axis
const up_reduce_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_y_up_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const up_reduce_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_y_up_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_y_down_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_y_down_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

// 2-phase reduce-add-scatter in x-axis
const left_reduce_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_x_left_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const left_reduce_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_x_left_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

const right_reduce_send_bsz_dim = @get_dsd(fabout_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_x_right_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const right_reduce_recv_bsz_dim = @get_dsd(fabin_dsd, .{
    .extent = bsz*dim_p_pe,
    .fabric_color = c_x_right_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

fn two_tree_allreduce_add_x_bsz_dim(vector_buf_ptr: [*]f16) void {

    vector_buf_dsd_bsz_dim = @set_dsd_base_addr(vector_buf_dsd_bsz_dim, vector_buf_ptr);
    @load_to_dsr(vector_buf_dsr, vector_buf_dsd_bsz_dim);

    // The first phase
    if (is_group_root_px) {
        if (!is_group_last_px) {
            @faddh(vector_buf_dsd_bsz_dim, mv_left_recv_bsz_dim, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_dim, mv_right_recv_bsz_dim, vector_buf_dsr);
    } else if (is_group_first_px) {
        @fmovh(mv_right_send_bsz_dim, vector_buf_dsr);
    } else if (is_group_last_px) {
        @fmovh(mv_left_send_bsz_dim, vector_buf_dsr);
    } else {
        if (is_top_half_px) {
            @faddh(mv_right_send_bsz_dim, mv_right_recv_bsz_dim, vector_buf_dsr);
        } else {
            @faddh(mv_left_send_bsz_dim, mv_left_recv_bsz_dim, vector_buf_dsr);
        }
    }

    // The second phase
    if (px == root_2nd_phase) {
        if (!is_last_group_px) {
            @faddh(vector_buf_dsd_bsz_dim, left_reduce_recv_bsz_dim, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_dim, right_reduce_recv_bsz_dim, vector_buf_dsr);
    } else if (is_group_root_px) {
        if (is_first_group_px) {
            @fmovh(right_reduce_send_bsz_dim, vector_buf_dsr);
        } else if (is_last_group_px) {
            @fmovh(left_reduce_send_bsz_dim, vector_buf_dsr);
        } else {
            if (px < root_2nd_phase) {
                @faddh(right_reduce_send_bsz_dim, right_reduce_recv_bsz_dim, vector_buf_dsr);
            } else {
                @faddh(left_reduce_send_bsz_dim, left_reduce_recv_bsz_dim, vector_buf_dsr);
            }
        }
    }

    // Scatter
    if (px == root_2nd_phase) {
        @fmovh(left_bd_send_bsz_dim, vector_buf_dsr);
        if (!is_last_px) {
            @fmovh(right_bd_send_bsz_dim, vector_buf_dsr);
        }
    } else {
        if (px < root_2nd_phase) {
            @fmovh(vector_buf_dsd_bsz_dim, left_bd_recv_bsz_dim);
        } else {
            @fmovh(vector_buf_dsd_bsz_dim, right_bd_recv_bsz_dim);
        }
    }

}

fn two_tree_allreduce_add_y_bsz_dim(vector_buf_ptr: [*]f16) void {

    vector_buf_dsd_bsz_dim = @set_dsd_base_addr(vector_buf_dsd_bsz_dim, vector_buf_ptr);
    @load_to_dsr(vector_buf_dsr, vector_buf_dsd_bsz_dim);

    // The first phase
    if (is_group_root_py) {
        if (!is_group_last_py) {
            @faddh(vector_buf_dsd_bsz_dim, mv_up_recv_bsz_dim, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_dim, mv_down_recv_bsz_dim, vector_buf_dsr);
    } else if (is_group_first_py) {
        @fmovh(mv_down_send_bsz_dim, vector_buf_dsr);
    } else if (is_group_last_py) {
        @fmovh(mv_up_send_bsz_dim, vector_buf_dsr);
    } else {
        if (is_top_half_py) {
            @faddh(mv_down_send_bsz_dim, mv_down_recv_bsz_dim, vector_buf_dsr);
        } else {
            @faddh(mv_up_send_bsz_dim, mv_up_recv_bsz_dim, vector_buf_dsr);
        }
    }

    // The second phase
    if (py == root_2nd_phase) {
        if (!is_last_group_py) {
            @faddh(vector_buf_dsd_bsz_dim, up_reduce_recv_bsz_dim, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_dim, down_reduce_recv_bsz_dim, vector_buf_dsr);
    } else if (is_group_root_py) {
        if (is_first_group_py) {
            @fmovh(down_reduce_send_bsz_dim, vector_buf_dsr);
        } else if (is_last_group_py) {
            @fmovh(up_reduce_send_bsz_dim, vector_buf_dsr);
        } else {
            if (py < root_2nd_phase) {
                @faddh(down_reduce_send_bsz_dim, down_reduce_recv_bsz_dim, vector_buf_dsr);
            } else {
                @faddh(up_reduce_send_bsz_dim, up_reduce_recv_bsz_dim, vector_buf_dsr);
            }
        }
    }

    // Scatter
    if (py == root_2nd_phase) {
        @fmovh(up_bd_send_bsz_dim, vector_buf_dsr);
        if (!is_last_py) {
            @fmovh(down_bd_send_bsz_dim, vector_buf_dsr);
        }
    } else {
        if (py < root_2nd_phase) {
            @fmovh(vector_buf_dsd_bsz_dim, up_bd_recv_bsz_dim);
        } else {
            @fmovh(vector_buf_dsd_bsz_dim, down_bd_recv_bsz_dim);
        }
    }

}


const mv_right_send_bsz_seqLen = @get_dsd(fabout_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = c_right_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_right_recv_bsz_seqLen = @get_dsd(fabin_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = c_right_recv,
    .simd_mode = .{ .simd_32 = true },
});

const mv_left_send_bsz_seqLen = @get_dsd(fabout_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = c_left_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_left_recv_bsz_seqLen = @get_dsd(fabin_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = c_left_recv,
    .simd_mode = .{ .simd_32 = true },
});

// For directly broadcast in x-axis
const left_bd_send_bsz_seqLen = @get_dsd(fabout_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = left_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const left_bd_recv_bsz_seqLen = @get_dsd(fabin_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = left_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const right_bd_send_bsz_seqLen = @get_dsd(fabout_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = right_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const right_bd_recv_bsz_seqLen = @get_dsd(fabin_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = right_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

// 2-phase reduce-add-scatter in x-axis
const left_reduce_send_bsz_seqLen = @get_dsd(fabout_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = c_x_left_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const left_reduce_recv_bsz_seqLen = @get_dsd(fabin_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = c_x_left_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

const right_reduce_send_bsz_seqLen = @get_dsd(fabout_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = c_x_right_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const right_reduce_recv_bsz_seqLen = @get_dsd(fabin_dsd, .{
    .extent = bsz*seq_len_p_pe,
    .fabric_color = c_x_right_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

fn two_tree_allreduce_add_x_bsz_seqLen(vector_buf_ptr: [*]f16) void {

    vector_buf_dsd_bsz_seqLen = @set_dsd_base_addr(vector_buf_dsd_bsz_seqLen, vector_buf_ptr);
    @load_to_dsr(vector_buf_dsr, vector_buf_dsd_bsz_seqLen);

    // The first phase
    if (is_group_root_px) {
        if (!is_group_last_px) {
            @faddh(vector_buf_dsd_bsz_seqLen, mv_left_recv_bsz_seqLen, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_seqLen, mv_right_recv_bsz_seqLen, vector_buf_dsr);
    } else if (is_group_first_px) {
        @fmovh(mv_right_send_bsz_seqLen, vector_buf_dsr);
    } else if (is_group_last_px) {
        @fmovh(mv_left_send_bsz_seqLen, vector_buf_dsr);
    } else {
        if (is_top_half_px) {
            @faddh(mv_right_send_bsz_seqLen, mv_right_recv_bsz_seqLen, vector_buf_dsr);
        } else {
            @faddh(mv_left_send_bsz_seqLen, mv_left_recv_bsz_seqLen, vector_buf_dsr);
        }
    }

    // The second phase
    if (px == root_2nd_phase) {
        if (!is_last_group_px) {
            @faddh(vector_buf_dsd_bsz_seqLen, left_reduce_recv_bsz_seqLen, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_seqLen, right_reduce_recv_bsz_seqLen, vector_buf_dsr);
    } else if (is_group_root_px) {
        if (is_first_group_px) {
            @fmovh(right_reduce_send_bsz_seqLen, vector_buf_dsr);
        } else if (is_last_group_px) {
            @fmovh(left_reduce_send_bsz_seqLen, vector_buf_dsr);
        } else {
            if (px < root_2nd_phase) {
                @faddh(right_reduce_send_bsz_seqLen, right_reduce_recv_bsz_seqLen, vector_buf_dsr);
            } else {
                @faddh(left_reduce_send_bsz_seqLen, left_reduce_recv_bsz_seqLen, vector_buf_dsr);
            }
        }
    }

    // Scatter
    if (px == root_2nd_phase) {
        @fmovh(left_bd_send_bsz_seqLen, vector_buf_dsr);
        if (!is_last_px) {
            @fmovh(right_bd_send_bsz_seqLen, vector_buf_dsr);
        }
    } else {
        if (px < root_2nd_phase) {
            @fmovh(vector_buf_dsd_bsz_seqLen, left_bd_recv_bsz_seqLen);
        } else {
            @fmovh(vector_buf_dsd_bsz_seqLen, right_bd_recv_bsz_seqLen);
        }
    }

}

const mv_down_send_bsz = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = c_down_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_down_recv_bsz = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = c_down_recv,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_send_bsz = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = c_up_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_recv_bsz = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = c_up_recv,
    .simd_mode = .{ .simd_32 = true },
});

// For directly broadcast in y-axis
const up_bd_send_bsz = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const up_bd_recv_bsz = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_send_bsz = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_recv_bsz = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const up_reduce_send_bsz = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = c_y_up_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const up_reduce_recv_bsz = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = c_y_up_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_send_bsz = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = c_y_down_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_recv_bsz = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = c_y_down_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

fn two_tree_allreduce_add_y_bsz(vector_buf_ptr: [*]f16) void {

    vector_buf_dsd_bsz = @set_dsd_base_addr(vector_buf_dsd_bsz, vector_buf_ptr);
    @load_to_dsr(vector_buf_dsr, vector_buf_dsd_bsz);

    // The first phase
    if (is_group_root_py) {
        if (!is_group_last_py) {
            @faddh(vector_buf_dsd_bsz, mv_up_recv_bsz, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz, mv_down_recv_bsz, vector_buf_dsr);
    } else if (is_group_first_py) {
        @fmovh(mv_down_send_bsz, vector_buf_dsr);
    } else if (is_group_last_py) {
        @fmovh(mv_up_send_bsz, vector_buf_dsr);
    } else {
        if (is_top_half_py) {
            @faddh(mv_down_send_bsz, mv_down_recv_bsz, vector_buf_dsr);
        } else {
            @faddh(mv_up_send_bsz, mv_up_recv_bsz, vector_buf_dsr);
        }
    }

    // The second phase
    if (py == root_2nd_phase) {
        if (!is_last_group_py) {
            @faddh(vector_buf_dsd_bsz, up_reduce_recv_bsz, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz, down_reduce_recv_bsz, vector_buf_dsr);
    } else if (is_group_root_py) {
        if (is_first_group_py) {
            @fmovh(down_reduce_send_bsz, vector_buf_dsr);
        } else if (is_last_group_py) {
            @fmovh(up_reduce_send_bsz, vector_buf_dsr);
        } else {
            if (py < root_2nd_phase) {
                @faddh(down_reduce_send_bsz, down_reduce_recv_bsz, vector_buf_dsr);
            } else {
                @faddh(up_reduce_send_bsz, up_reduce_recv_bsz, vector_buf_dsr);
            }
        }
    }

    // Scatter
    if (py == root_2nd_phase) {
        @fmovh(up_bd_send_bsz, vector_buf_dsr);
        if (!is_last_py) {
            @fmovh(down_bd_send_bsz, vector_buf_dsr);
        }
    } else {
        if (py < root_2nd_phase) {
            @fmovh(vector_buf_dsd_bsz, up_bd_recv_bsz);
        } else {
            @fmovh(vector_buf_dsd_bsz, down_bd_recv_bsz);
        }
    }

}

const mv_down_send_max = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = c_down_send,
});

const mv_down_recv_max = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = c_down_recv,
});

const mv_up_send_max = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = c_up_send,
});

const mv_up_recv_max = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = c_up_recv,
});

const up_reduce_send_max = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = c_y_up_reduce_send,
});

const up_reduce_recv_max = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = c_y_up_reduce_recv,
});

const down_reduce_send_max = @get_dsd(fabout_dsd, .{
    .extent = bsz,
    .fabric_color = c_y_down_reduce_send,
});

const down_reduce_recv_max = @get_dsd(fabin_dsd, .{
    .extent = bsz,
    .fabric_color = c_y_down_reduce_recv,
});

fn two_tree_allreduce_max_y_bsz(vector_buf_ptr: [*]f16) void {

    vector_buf_dsd_bsz = @set_dsd_base_addr(vector_buf_dsd_bsz, vector_buf_ptr);
    // @load_to_dsr(vector_buf_dsr, vector_buf_dsd);

    // The first phase
    if (is_group_root_py) {
        if (!is_group_last_py) {
            @fmaxh(vector_buf_dsd_bsz, mv_up_recv_max, vector_buf_dsd_bsz);
        }
        @fmaxh(vector_buf_dsd_bsz, mv_down_recv_max, vector_buf_dsd_bsz);
    } else if (is_group_first_py) {
        @fmovh(mv_down_send_max, vector_buf_dsd_bsz);
    } else if (is_group_last_py) {
        @fmovh(mv_up_send_max, vector_buf_dsd_bsz);
    } else {
        if (is_top_half_py) {
            @fmaxh(mv_down_send_max, mv_down_recv_max, vector_buf_dsd_bsz);
        } else {
            @fmaxh(mv_up_send_max, mv_up_recv_max, vector_buf_dsd_bsz);
        }
    }

    // The second phase
    if (py == root_2nd_phase) {
        if (!is_last_group_py) {
            @fmaxh(vector_buf_dsd_bsz, up_reduce_recv_max, vector_buf_dsd_bsz);
        }
        @fmaxh(vector_buf_dsd_bsz, down_reduce_recv_max, vector_buf_dsd_bsz);
    } else if (is_group_root_py) {
        if (is_first_group_py) {
            @fmovh(down_reduce_send_max, vector_buf_dsd_bsz);
        } else if (is_last_group_py) {
            @fmovh(up_reduce_send_max, vector_buf_dsd_bsz);
        } else {
            if (py < root_2nd_phase) {
                @fmaxh(down_reduce_send_max, down_reduce_recv_max, vector_buf_dsd_bsz);
            } else {
                @fmaxh(up_reduce_send_max, up_reduce_recv_max, vector_buf_dsd_bsz);
            }
        }
    }

    // Scatter
    if (py == root_2nd_phase) {
        @fmovh(up_bd_send_bsz, vector_buf_dsd_bsz);
        if (!is_last_py) {
            @fmovh(down_bd_send_bsz, vector_buf_dsd_bsz);
        }
    } else {
        if (py < root_2nd_phase) {
            @fmovh(vector_buf_dsd_bsz, up_bd_recv_bsz);
        } else {
            @fmovh(vector_buf_dsd_bsz, down_bd_recv_bsz);
        }
    }

}

const mv_down_send_bsz_dim_QKV_fusion = @get_dsd(fabout_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = c_down_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_down_recv_bsz_dim_QKV_fusion = @get_dsd(fabin_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = c_down_recv,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_send_bsz_dim_QKV_fusion = @get_dsd(fabout_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = c_up_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_recv_bsz_dim_QKV_fusion = @get_dsd(fabin_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = c_up_recv,
    .simd_mode = .{ .simd_32 = true },
});

// 2-phase reduce-add-scatter in y-axis
const up_reduce_send_bsz_dim_QKV_fusion = @get_dsd(fabout_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = c_y_up_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const up_reduce_recv_bsz_dim_QKV_fusion = @get_dsd(fabin_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = c_y_up_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_send_bsz_dim_QKV_fusion = @get_dsd(fabout_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = c_y_down_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_recv_bsz_dim_QKV_fusion = @get_dsd(fabin_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = c_y_down_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

// For directly broadcast in y-axis
const up_bd_send_bsz_dim_QKV_fusion = @get_dsd(fabout_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const up_bd_recv_bsz_dim_QKV_fusion = @get_dsd(fabin_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_send_bsz_dim_QKV_fusion = @get_dsd(fabout_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_recv_bsz_dim_QKV_fusion = @get_dsd(fabin_dsd, .{
    .extent = 3*bsz*dim_p_pe,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

fn two_tree_allreduce_add_y_bsz_dim_QKV_fusion(vector_buf_ptr: [*]f16) void {

    vector_buf_dsd_bsz_dim_QKV_fusion = @set_dsd_base_addr(vector_buf_dsd_bsz_dim_QKV_fusion, vector_buf_ptr);
    @load_to_dsr(vector_buf_dsr, vector_buf_dsd_bsz_dim_QKV_fusion);

    // The first phase
    if (is_group_root_py) {
        if (!is_group_last_py) {
            @faddh(vector_buf_dsd_bsz_dim_QKV_fusion, mv_up_recv_bsz_dim_QKV_fusion, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_dim_QKV_fusion, mv_down_recv_bsz_dim_QKV_fusion, vector_buf_dsr);
    } else if (is_group_first_py) {
        @fmovh(mv_down_send_bsz_dim_QKV_fusion, vector_buf_dsr);
    } else if (is_group_last_py) {
        @fmovh(mv_up_send_bsz_dim_QKV_fusion, vector_buf_dsr);
    } else {
        if (is_top_half_py) {
            @faddh(mv_down_send_bsz_dim_QKV_fusion, mv_down_recv_bsz_dim_QKV_fusion, vector_buf_dsr);
        } else {
            @faddh(mv_up_send_bsz_dim_QKV_fusion, mv_up_recv_bsz_dim_QKV_fusion, vector_buf_dsr);
        }
    }

    // The second phase
    if (py == root_2nd_phase) {
        if (!is_last_group_py) {
            @faddh(vector_buf_dsd_bsz_dim_QKV_fusion, up_reduce_recv_bsz_dim_QKV_fusion, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_dim_QKV_fusion, down_reduce_recv_bsz_dim_QKV_fusion, vector_buf_dsr);
    } else if (is_group_root_py) {
        if (is_first_group_py) {
            @fmovh(down_reduce_send_bsz_dim_QKV_fusion, vector_buf_dsr);
        } else if (is_last_group_py) {
            @fmovh(up_reduce_send_bsz_dim_QKV_fusion, vector_buf_dsr);
        } else {
            if (py < root_2nd_phase) {
                @faddh(down_reduce_send_bsz_dim_QKV_fusion, down_reduce_recv_bsz_dim_QKV_fusion, vector_buf_dsr);
            } else {
                @faddh(up_reduce_send_bsz_dim_QKV_fusion, up_reduce_recv_bsz_dim_QKV_fusion, vector_buf_dsr);
            }
        }
    }

    // Scatter
    if (py == root_2nd_phase) {
        @fmovh(up_bd_send_bsz_dim_QKV_fusion, vector_buf_dsr);
        if (!is_last_py) {
            @fmovh(down_bd_send_bsz_dim_QKV_fusion, vector_buf_dsr);
        }
    } else {
        if (py < root_2nd_phase) {
            @fmovh(vector_buf_dsd_bsz_dim_QKV_fusion, up_bd_recv_bsz_dim_QKV_fusion);
        } else {
            @fmovh(vector_buf_dsd_bsz_dim_QKV_fusion, down_bd_recv_bsz_dim_QKV_fusion);
        }
    }

}

const mv_down_send_bsz_ffnDim_ZZ_fusion = @get_dsd(fabout_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = c_down_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_down_recv_bsz_ffnDim_ZZ_fusion = @get_dsd(fabin_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = c_down_recv,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_send_bsz_ffnDim_ZZ_fusion = @get_dsd(fabout_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = c_up_send,
    .simd_mode = .{ .simd_32 = true },
});

const mv_up_recv_bsz_ffnDim_ZZ_fusion = @get_dsd(fabin_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = c_up_recv,
    .simd_mode = .{ .simd_32 = true },
});

// 2-phase reduce-add-scatter in y-axis
const up_reduce_send_bsz_ffnDim_ZZ_fusion = @get_dsd(fabout_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = c_y_up_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const up_reduce_recv_bsz_ffnDim_ZZ_fusion = @get_dsd(fabin_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = c_y_up_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_send_bsz_ffnDim_ZZ_fusion = @get_dsd(fabout_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = c_y_down_reduce_send,
    .simd_mode = .{ .simd_32 = true },
});

const down_reduce_recv_bsz_ffnDim_ZZ_fusion = @get_dsd(fabin_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = c_y_down_reduce_recv,
    .simd_mode = .{ .simd_32 = true },
});

// For directly broadcast in y-axis
const up_bd_send_bsz_ffnDim_ZZ_fusion = @get_dsd(fabout_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const up_bd_recv_bsz_ffnDim_ZZ_fusion = @get_dsd(fabin_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = up_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_send_bsz_ffnDim_ZZ_fusion = @get_dsd(fabout_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

const down_bd_recv_bsz_ffnDim_ZZ_fusion = @get_dsd(fabin_dsd, .{
    .extent = 2*bsz*ffn_dim_p_pe,
    .fabric_color = down_bd_color,
    .simd_mode = .{ .simd_32 = true },
});

fn two_tree_allreduce_add_y_bsz_ffn_dim_ZZ_fusion(vector_buf_ptr: [*]f16) void {

    vector_buf_dsd_bsz_ffnDim_ZZ_fusion = @set_dsd_base_addr(vector_buf_dsd_bsz_ffnDim_ZZ_fusion, vector_buf_ptr);
    @load_to_dsr(vector_buf_dsr, vector_buf_dsd_bsz_ffnDim_ZZ_fusion);

    // The first phase
    if (is_group_root_py) {
        if (!is_group_last_py) {
            @faddh(vector_buf_dsd_bsz_ffnDim_ZZ_fusion, mv_up_recv_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_ffnDim_ZZ_fusion, mv_down_recv_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
    } else if (is_group_first_py) {
        @fmovh(mv_down_send_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
    } else if (is_group_last_py) {
        @fmovh(mv_up_send_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
    } else {
        if (is_top_half_py) {
            @faddh(mv_down_send_bsz_ffnDim_ZZ_fusion, mv_down_recv_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
        } else {
            @faddh(mv_up_send_bsz_ffnDim_ZZ_fusion, mv_up_recv_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
        }
    }

    // The second phase
    if (py == root_2nd_phase) {
        if (!is_last_group_py) {
            @faddh(vector_buf_dsd_bsz_ffnDim_ZZ_fusion, up_reduce_recv_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
        }
        @faddh(vector_buf_dsd_bsz_ffnDim_ZZ_fusion, down_reduce_recv_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
    } else if (is_group_root_py) {
        if (is_first_group_py) {
            @fmovh(down_reduce_send_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
        } else if (is_last_group_py) {
            @fmovh(up_reduce_send_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
        } else {
            if (py < root_2nd_phase) {
                @faddh(down_reduce_send_bsz_ffnDim_ZZ_fusion, down_reduce_recv_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
            } else {
                @faddh(up_reduce_send_bsz_ffnDim_ZZ_fusion, up_reduce_recv_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
            }
        }
    }

    // Scatter
    if (py == root_2nd_phase) {
        @fmovh(up_bd_send_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
        if (!is_last_py) {
            @fmovh(down_bd_send_bsz_ffnDim_ZZ_fusion, vector_buf_dsr);
        }
    } else {
        if (py < root_2nd_phase) {
            @fmovh(vector_buf_dsd_bsz_ffnDim_ZZ_fusion, up_bd_recv_bsz_ffnDim_ZZ_fusion);
        } else {
            @fmovh(vector_buf_dsd_bsz_ffnDim_ZZ_fusion, down_bd_recv_bsz_ffnDim_ZZ_fusion);
        }
    }

}

comptime {
    @block(c_right_recv);
    @block(c_left_recv);
    @block(c_down_recv);
    @block(c_up_recv);
}